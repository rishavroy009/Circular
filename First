#include <iostream>
#include <fstream>
#include <sys/mman.h>
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string>
#include <queue>

using namespace std;

// Shared memory file name
const char* SHM_FILE = "/tmp/shared_memory";
// Size of shared memory
const size_t SHM_SIZE = 10 * 1024 * 1024; // 10 MB

// Function to create shared memory
int create_shared_memory() {
    // Create a shared memory file
    int shm_fd = shm_open(SHM_FILE, O_CREAT | O_RDWR, 0666);
    if (shm_fd == -1) {
        perror("shm_open");
        return -1;
    }

    // Set the size of the shared memory
    if (ftruncate(shm_fd, SHM_SIZE) == -1) {
        perror("ftruncate");
        return -1;
    }

    return shm_fd;
}

// Function to map shared memory
void* map_shared_memory(int shm_fd) {
    // Map shared memory into process address space
    void* shm_ptr = mmap(NULL, SHM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);
    if (shm_ptr == MAP_FAILED) {
        perror("mmap");
        return NULL;
    }

    return shm_ptr;
}

// Function to unmap shared memory
void unmap_shared_memory(void* shm_ptr) {
    if (munmap(shm_ptr, SHM_SIZE) == -1) {
        perror("munmap");
    }
}

// Function to close shared memory file descriptor
void close_shared_memory(int shm_fd) {
    if (close(shm_fd) == -1) {
        perror("close");
    }
}

// Function to remove shared memory file
void remove_shared_memory() {
    if (shm_unlink(SHM_FILE) == -1) {
        perror("shm_unlink");
    }
}

int main() {
    // Create shared memory
    int shm_fd = create_shared_memory();
    if (shm_fd == -1) {
        return 1;
    }

    // Map shared memory
    void* shm_ptr = map_shared_memory(shm_fd);
    if (shm_ptr == NULL) {
        close_shared_memory(shm_fd);
        return 1;
    }

    // Producer process
    // Read data from the file and write it to shared memory
    ifstream file("input.txt");
    if (file.is_open()) {
        // Read data from the file in chunks of 1024 bytes
        char buffer[1024];
        char* shm_buffer = (char*)shm_ptr;
        while (file.read(buffer, 1024)) {
            memcpy(shm_buffer, buffer, 1024);
            shm_buffer += 1024;
        }
        file.close();
    } else {
        cout << "Unable to open file" << endl;
        return 1;
    }

    // Unmap shared memory
    unmap_shared_memory(shm_ptr);

    // Close shared memory file descriptor
    close_shared_memory(shm_fd);

    // Consumer process
    // Read data from shared memory and write it to a file
    shm_fd = shm_open(SHM_FILE, O_RDONLY, 0666);
    if (shm_fd == -1) {
        perror("shm_open");
        return 1;
    }

    shm_ptr = map_shared_memory(shm_fd);
    if (shm_ptr == NULL) {
        close_shared_memory(shm_fd);
        return 1;
    }

    ofstream output_file("output.txt");
    if (output_file.is_open()) {
        // Read data from shared memory
        char* shm_buffer = (char*)shm_ptr;
        for (size_t i = 0; i < SHM_SIZE; i++) {
            output_file << *shm_buffer;
            shm_buffer++;
        }
        output_file.close();
    } else {
        cout << "Unable to open file" << endl;
        return 1;
    }

    // Unmap shared memory
    unmap_shared_memory(shm_ptr);

    // Close shared memory file descriptor
    close_shared_memory(shm_fd);

    // Remove shared memory file
    remove_shared_memory();

    return 0;
}
